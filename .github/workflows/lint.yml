---
name: Lint

on:
  - push

permissions: {}

defaults:
  run:
    # Add `-o pipefail` option to bash
    # References
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
    shell: bash

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-22.04
    permissions: {}
    timeout-minutes: 5
    env:
      # This value is default RuboCop cache path.
      # https://docs.rubocop.org/rubocop/usage/caching.html#cache-path
      # > By default,
      # > the cache is stored in either `$XDG_CACHE_HOME/$UID/rubocop_cache`
      # > if `$XDG_CACHE_HOME` is set
      # > or in `$HOME/.cache/rubocop_cache/` if it’s not.
      RUBOCOP_CACHE_PATH: "$HOME/.cache/rubocop_cache/"
    steps:
      - name: Create a timeline of this GitHub Actions workflow
        # yamllint disable-line rule:line-length
        uses: Kesin11/actions-timeline@baa62e018ca5504e2d617502ce1eacf9171e757a # v2.0.1
        with:
          github-token: ${{ github.token }}

      - name: Runtime security for GitHub
        # yamllint disable-line rule:line-length
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          disable-sudo: true
          # Disable file monitoring
          # because this workflow always overwrites files.
          # "Detect with using `sed` command" action of this workflow
          # overwrites files with using `sed` command.
          # If enable file monitoring of HardenRunner
          # and you enable notifications of HardenRunner,
          # HardenRunner alert you with such as E-Mail when this workflow run.
          # https://github.com/step-security/harden-runner?tab=readme-ov-file#-detect-tampering-of-source-code-during-build
          disable-file-monitoring: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            index.rubygems.org:443
            objects.githubusercontent.com:443
            raw.githubusercontent.com:443
            rekor.sigstore.dev:443
            rubygems.org:443
            tuf-repo-cdn.sigstore.dev:443

      - name: Checkout
        # yamllint disable-line rule:line-length
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          # Gets the full git history of the repository.
          # `Lint commit messages` action of this workflow
          # uses the commit messages.
          fetch-depth: 0

      - name: Install Natural Languages linter
        uses: ./.github/actions/install_tools_with_aqua

      - name: Download and install external rules of Natural Languages linter
        run: vale sync

      - name: Install Ruby and RubyGems
        uses: ./.github/actions/install_ruby_and_rubygems

      # Does not use `actions/cache` action
      # because hituzi no sippo (maintainer) want to save the cache
      # if `lint` step of the job succeed.
      # so hituzi no sippo does not want to save the cache
      # when `lint` action fails and `Detect with ...` succeed.
      # Does not use `save-always` flag of `actions/cache` action
      # because the flag is used to
      # always save cache even if another step fails.
      # https://github.com/actions/cache/pull/1242
      - name: Restore cached RuboCop
        id: cache-rubocop-restore
        # yamllint disable-line rule:line-length
        uses: actions/cache/restore@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: ${{ env.RUBOCOP_CACHE_PATH }}
          # RuBoCop Cache Validity
          # https://docs.rubocop.org/rubocop/usage/caching.html#cache-validity
          # > Later runs will be able to retrieve this information and
          # > present the stored information instead of inspecting
          # > the file again.
          # > This will be done if the cache for the file is still valid,
          # > which it is if there are no changes in:
          # > - the contents of the inspected file
          # > - RuboCop configuration for the file
          # > - the options given to rubocop, with some exceptions that
          # >   have no bearing on which offenses are reported
          # > - the Ruby version used to invoke rubocop
          # > - version of the rubocop program
          # >   (or to be precise, anything in the source code
          # >    of the invoked rubocop program)
          # - RuboCop configuration for the file
          #   - .rubocop.yml
          #   - .rubocop_todo.yml
          # - the options given to rubocop, with some exceptions that
          #   have no bearing on which offenses are reported
          #   - ${{ steps.decide_sub_command.outputs.sub_command }}
          #     Decide CLI option to filter COPS (`--only`, `--except`)
          #     by ${{ steps.decide_sub_command.outputs.sub_command }}
          # - the Ruby version used to invoke rubocop
          #   - .ruby-version
          # - version of the rubocop program
          #   - Gemfile.lock
          # yamllint disable-line rule:line-length
          key: ${{ env.CACHE_PREFIX }}${{ hashFiles('.rubocop.yml', '.rubocop_todo.yml', '.ruby-version', 'Gemfile.lock') }}
          restore-keys: ${{ env.CACHE_PREFIX }}
        env:
          CACHE_PREFIX: rubocop-cache-

      # First of all, Lefthook is name of a task runner.
      #
      # This job run all commands of `lint` task.
      # The files to lint is the all files, which are manged by Git.
      # Not the all modified files on push.
      #
      # NOTE
      # On Lefthook v1.5.5,
      # You cannot change the files to lint passed to `lint` task of Lefthook
      # with using `--file strings` option of Lefthook CLI
      # because the commands of `lint` task use `{all_files}` files template.
      #
      # `--file strings` option of Lefthook v1.5.5:
      # - `{all_files}`
      #   The option does not overwrite `{all_files}` file template.
      #   The commands of `lint` task use `{all_files}` file template.
      # - `{stagin_files}`
      #   The option overwrites `{stagin_files}` files template.
      #
      # References
      # https://github.com/evilmartians/lefthook/blob/9b072e6622857ceb8d40a173ba39ae97afb35957/internal/lefthook/run/prepare_command.go#L78-L79
      # v1.5.5 Commit on 2023-12-01
      #
      ##################################################
      #
      # Does not separate the commands of `lint` task
      # by step or job of GitHub Actions,
      # as in the following codes:
      # - Separates commands by step
      #   Example
      #   ``` YAML
      #   # Runs one task for each step.
      #   - name: Lint
      #     uses: ./.github/actions/run_task_runner
      #     with:
      #       task_name: lint
      #     - name
      #     ```
      # - Separates commands by job
      #   Example
      #   ``` YAML
      #   # Runs one task for each job.
      #   jobs:
      #     format:
      #       runs-on: ubuntu-22.04
      #       ...
      #
      #     lint:
      #       runs-on: ubuntu-22.04
      #       ...
      #   ```
      #
      # Does not separate the commands
      # because without separating the commands by step or job,
      # you can check the all command results of `lint` task of Lefthok.
      # To check the all command results of a run task,
      # you look at Lefthook outputs.
      #
      # Example of Lefthook output
      # ``` console
      # $ lefthook run lint
      # ╭────────────────────────────────╮
      # │ 🥊 lefthook v1.5.5  hook: lint │
      # ╰────────────────────────────────╯
      # ┃  bar ❯
      #
      #
      # ┃  foo ❯
      #
      # foo
      #
      #
      #   ────────────────────────────────────
      # summary: (done in 0.00 seconds)
      # ✔️  foo
      # 🥊  bar
      # ```
      #
      # Lefthook configuration file (`.lefthook.yml`)
      # ``` YAML
      # ---
      # min_version: 1.5.5
      #
      # lint:
      #   commands:
      #     foo:
      #       run: echo 'foo'
      #     bar:
      #       run: exit 1
      # ```
      #
      ##################################################
      #
      # Does not create one workflow for each file extension.
      #
      # The reason is,
      # which the more workflows, the more costs of the following:
      # 1. Maintenance
      #    This is Primary reason.
      #
      #    If you create workflows for each file extension,
      #    you would set `on.push.<paths|paths-ignore>` to each workflow.
      #    This `<paths|paths-ignore>` has a maintenance cost.
      #    Incorrect `<paths|paths-ignore>` results in some files,
      #    which are not done lint.
      #
      #    Because this workflow does not set `<paths|paths-ignore>`,
      #    no matter which file you change, this workflow lint all git managed files.
      #
      #    hituzi no sippo (maintainer) wants to lint only changed files.
      #    When changes files to lint, uses Lefthook.
      #    Does not use GitHub Actions workflow.
      #    However, as noted in the previous note,
      #    Lefthook v1.5.5 cannot changes files to lint.
      #    `--files` option of Lefthook CLI v1.5.5
      #    does not overwrite `{all_files}` file template.
      #
      # 2. Execution Time
      #    The more workflows, the more jobs.
      #    A job increases execution time
      #    because jobs do the following process:
      #
      #    - Provisions a new VM
      #      https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#using-a-github-hosted-runner
      #    - Checkout a repository
      #    - Setting `step-security/harden-runner`
      #
      #    hituzi no sippo surmises which, is in many cases,
      #    if the extensions of changed files is of more than one type,
      #    execution time of this workflow is shortest
      #    than the workflows separated by file extension.
      #    The reason for this surmises is,
      #    which hituzi no sippo thinks that
      #    execution time is `(ET3 * NW) > ETCNR`.
      #    - `ET3`
      #      Execution time for above 3 process,
      #      such as 'provisions a new VM'.
      #    - `NW`
      #      Number of GitHub Actions Workflows.
      #    - `ETCNR`
      #      Execution time for commands not related to the changed file.
      #      For example is command to lint Ruby files
      #      if you change JavaScript files.
      #
      # As written in the beginning, does not separate this workflow.
      # This is because the advantages of separating workflow
      # are smaller than the disadvantages (maintenance and time costs).
      #
      ##################################################
      #
      # Does not use `lint-fix` task of Lefthook.
      #
      # If you would like to fix codes,
      # you run `lefthook run lint-fix` command on your local
      # and then you commit to fix codes.
      #
      # You can commit to fix codes with using `lint-fix` task on this workflow,
      # but this workflow does not commit because the following three points.
      #
      # The premise is,
      # which if you use `lint-fix` task,
      # you would add a GitHub Action step to add a commit to this workflow.
      #
      # Example
      # ``` YAML
      # - name: run `lint-fix` task
      #   ...
      # - name: commit to fix codes
      #   ...
      # ```
      #
      # - Someone can add or overwrite codes easily
      #   Someone can it
      #   because if someone add command to add or overwrite codes
      #   to `lint-fix` task,
      #   GitHub Actions workflow would work the following:
      #
      #   1. Runs the commands of `lint-fix` task
      #   2. Runs a added command to add or overwrite codes
      #   3. Adds a commit to add or overwrite codes
      #
      # - The commit to be created has multiple types of fix
      #   If `lint-fix` task contains
      #   format (prettier) and lint (eslint) commands
      #   and than the both commands fix codes,
      #   which is commit type (style, refactor, docs) of Conventional Commits?
      #   Also what optional scope of Conventional Commits do you write?
      #
      #   hituzi no sippo (maintainer) prefers a commit message
      #   with one commit type and one optional scope.
      #   hituzi no sippo does not like a commit message with multiple those.
      #
      #   - Good: `docs(hoo): fix typos`
      #   - Hmm: `docs,style(hoo,bar): fix docs`
      #
      #   Conventional Commits
      #   https://www.conventionalcommits.org/en/v1.0.0/
      #
      #   You can certainly create a commit with one kind of fix
      #   on GitHub Actions workflow,
      #   if you separate commands of `lint-fix` by GitHub Actions Step.
      #
      #   Example
      #   ``` YAML
      #   - name: Run prettier
      #     ...
      #   - name: commit to fix styles
      #     ...
      #   - name: Run eslint
      #     ...
      #   - name: commit to fix codes
      #     ...
      #   ````
      #
      #   hituzi no sippo does not prefer to separate commands
      #   by GitHub Actions step
      #   because if you separate commands of `lint-fix` by step,
      #   every time a tool is added,
      #   you have to add steps to run a command and add a commit.
      #   hituzi no sippo feels it tedious to add this GitHub Actions steps.
      #
      # - hituzi no sippo would like to modify a commit
      #   hituzi no sippo would like to modify a commit
      #   with using `git rebase --interactive --rebase` command.
      #   This is because
      #   hituzi no sippo prefers to modify a commit
      #   rather than add a commit to fix codes.
      #
      #   You should create a new commit to fix codes
      #   if modifying that commit,
      #   such as a commit of a remote main branch,
      #   would inconvenience other developers,
      - name: Lint
        uses: ./.github/actions/run_task_runner
        with:
          task_name: lint
        env:
          # This workflow skips following commands:
          # - A command takes a long time or uses network processing
          # - You only need to run the command
          #   if specific files have been modified
          #   Examples of the files are `package.json` or `.renovaterc.json`.
          #   If you want to look the specific files,
          #   look at the configuration file of the command to be skipped.
          #   The configuration files are under `<GIT_ROOT>/.leftook` directory.
          # https://github.com/evilmartians/lefthook/blob/9b072e6622857ceb8d40a173ba39ae97afb35957/docs/usage.md#lefthook_exclude
          LEFTHOOK_EXCLUDE: |
            validate-renovate-configuration, \
            lint-asciidoc,

      - name: Save RuboCop cache
        uses: actions/cache/save@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: ${{ env.RUBOCOP_CACHE_PATH }}
          key: ${{ steps.cache-rubocop-restore.outputs.cache-primary-key }}

      # Runs the detect commands which, is not in `lint` task of Lefthook.
      # `lint` task of Lefthook does not contain this commands to be run.
      # because the commands would change codes.
      # The commands always change the files
      # because the commands to be run use sed.
      - name: Detect with using `sed` command
        uses: ./.github/actions/run_task_runner
        with:
          # Runs `pre-merge-commit` task
          # because commands of `pre-merge-commit` task
          # use `{staged_files}` files template.
          # `--all-files` flag of Lefthook CLI can only
          # overwrite `{staged_files}` files template.
          # `--all-files` flag can
          # not overwrite `{push_files}` and `{all_files}` files templates.
          # References
          # https://github.com/evilmartians/lefthook/blob/9b072e6622857ceb8d40a173ba39ae97afb35957/internal/lefthook/run/prepare_command.go#L80-L81
          # v1.5.5 Commit on 2023-12-01
          task_name: pre-merge-commit
          # `--all-files` flag changes the files to detect
          # to the all files, which are manged by Git.
          # References
          # https://github.com/evilmartians/lefthook/blob/9b072e6622857ceb8d40a173ba39ae97afb35957/docs/usage.md#lefthook-run
          # v1.5.5 Commit on 2023-12-01
          task_runner_args: "--all-files"

      - name: Lint commit messages of this repository
        uses: ./.github/actions/run_task_runner
        with:
          task_name: lint-commit-messages
